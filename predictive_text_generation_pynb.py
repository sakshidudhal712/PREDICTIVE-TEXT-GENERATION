# -*- coding: utf-8 -*-
"""PREDICTIVE TEXT GENERATION.pynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oCuQJcpHoBQGZUhyQPjoLX7llJfsU1t-
"""

#515 HOMEWORK 2
#PREDICTIVE TEXT GENERATION: assignment is to use the Datamuse API to generate a predictive text-driven Haiku on a
#topic of the user’s choice. Like ChatGPT, you will be generating your own short text response
#based on a user’s input!
#Name: Sakshi Dudhal

import requests,json

# Function to find a word with a specified number of syllables
def find_word_with_syllables(word, syllables):
    url = "https://api.datamuse.com/words?md=s&sp=*&lc="
    result = ""
    final_url = url + word
    response = requests.get(final_url)

    if response.status_code == 200:
        data = json.loads(response.text)

        for i in data:
            word1 = i["word"]
            num_syllables = i["numSyllables"]
            if num_syllables == syllables:
                result = word1
                break

        if result == "":
            raise ValueError

        return result

    else:
        raise Exception

# Function to find a rhyming word for a given word
def find_rhyming_word(word, rhyming_word):
    url = "https://api.datamuse.com/words?md=s&sp=*&lc="
    result = ""
    final_url = url + word + "&rel_rhy=" + rhyming_word
    response = requests.get(final_url)

    if response.status_code == 200:
        data = json.loads(response.text)

        for i in data:
            word1 = i["word"]
            num_syllables = i["numSyllables"]
            if num_syllables == 2:
                result = word1
                break

        if result == "":
            raise ValueError

        return result
    else:
        raise Exception

# Function to find the starting word related to a given topic
def find_start_word(first_word):
    first_word_url = "https://api.datamuse.com/words?md=s&rel_trg="
    line1 = ""
    url1 = first_word_url + first_word
    response = requests.get(url1)

    if response.status_code == 200:
        data = json.loads(response.text)

        for i in data:
            word = i["word"]
            num_syllables = i["numSyllables"]
            if num_syllables == 3:
                line1 = word
                break

        if line1 == "":
            raise ValueError

        return line1
    else:
        raise Exception

repeat = "yes"
print("Hello, welcome to the predictive text Haiku generator!")

while repeat == "yes":

    try:
        first_line = ""
        second_line = ""
        third_line = ""

        first_word = input("What would you like to create a Haiku about? ").lower()

        first_line = find_start_word(first_word)

        second_word = find_word_with_syllables(first_line, 2)
        first_line = first_line + " " + second_word
        print(first_line)

        second_line = second_line + find_word_with_syllables(second_word, 3)
        fourth_word = find_word_with_syllables(second_line, 2)
        second_line = second_line + " " + fourth_word
        second_line = second_line + " " + find_rhyming_word(fourth_word, second_word)

        fifth_word = find_rhyming_word(fourth_word, second_word)
        print(second_line)

        third_line = third_line + find_word_with_syllables(fifth_word, 3)
        third_line = third_line + " " + find_rhyming_word(third_line, fifth_word)
        print(third_line)

    except ValueError:
        print("Sorry, a valid Haiku could not be generated.")
    except:
        print("Connection error ocurred")

    repeat_again = input("Would you like to create another Haiku (yes/no)? ").lower()
    if repeat_again != "yes":
        break